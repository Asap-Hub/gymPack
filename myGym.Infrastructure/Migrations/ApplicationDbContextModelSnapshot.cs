// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using gym.Infrastructure.Persistances.ApplicationDBContext;

namespace gym.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("gym.Application.Extentions.IdentityExtension.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("gym.Domain.Model.TblMyTodo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EdittedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EdittedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tblMyTodo");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            CreatedBy = "Instructor Malik",
                            CreatedDate = new DateTime(2023, 6, 6, 0, 35, 29, 792, DateTimeKind.Local).AddTicks(4187),
                            EdittedBy = "Asap",
                            EdittedDate = new DateTime(2023, 6, 6, 0, 35, 29, 792, DateTimeKind.Local).AddTicks(4200),
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(1933),
                            Note = "finish hard",
                            StartDate = new DateTime(2023, 6, 6, 0, 35, 29, 792, DateTimeKind.Local).AddTicks(2634),
                            Title = "task 1"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "Instructor Malik",
                            CreatedDate = new DateTime(2023, 6, 6, 0, 35, 29, 792, DateTimeKind.Local).AddTicks(4305),
                            EdittedBy = "Asap",
                            EdittedDate = new DateTime(2023, 6, 6, 0, 35, 29, 792, DateTimeKind.Local).AddTicks(4307),
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(2006),
                            Note = "finish hard",
                            StartDate = new DateTime(2023, 6, 6, 0, 35, 29, 792, DateTimeKind.Local).AddTicks(4271),
                            Title = "task 2"
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "Instructor Malik",
                            CreatedDate = new DateTime(2023, 6, 6, 0, 35, 29, 792, DateTimeKind.Local).AddTicks(4312),
                            EdittedBy = "Asap",
                            EdittedDate = new DateTime(2023, 6, 6, 0, 35, 29, 792, DateTimeKind.Local).AddTicks(4314),
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(2003),
                            Note = "finish hard",
                            StartDate = new DateTime(2023, 6, 6, 0, 35, 29, 792, DateTimeKind.Local).AddTicks(4310),
                            Title = "task 3"
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = "Instructor Malik",
                            CreatedDate = new DateTime(2023, 6, 6, 0, 35, 29, 792, DateTimeKind.Local).AddTicks(4320),
                            EdittedBy = "Asap",
                            EdittedDate = new DateTime(2023, 6, 6, 0, 35, 29, 792, DateTimeKind.Local).AddTicks(4322),
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(1997),
                            Note = "finish hard",
                            StartDate = new DateTime(2023, 6, 6, 0, 35, 29, 792, DateTimeKind.Local).AddTicks(4317),
                            Title = "task 4"
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = "Instructor Malik",
                            CreatedDate = new DateTime(2023, 6, 6, 0, 35, 29, 792, DateTimeKind.Local).AddTicks(4326),
                            EdittedBy = "Asap",
                            EdittedDate = new DateTime(2023, 6, 6, 0, 35, 29, 792, DateTimeKind.Local).AddTicks(4328),
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified).AddTicks(1995),
                            Note = "finish hard",
                            StartDate = new DateTime(2023, 6, 6, 0, 35, 29, 792, DateTimeKind.Local).AddTicks(4324),
                            Title = "task 5"
                        });
                });

            modelBuilder.Entity("gym.Domain.Model.TblProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<bool>("Confirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ConfirmedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EdittedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EdittedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Percentage")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tblProgress");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Completed = false,
                            Confirmed = false,
                            ConfirmedBy = "Instructor Malik",
                            CreatedBy = "Asap",
                            CreatedDate = new DateTime(2023, 6, 6, 0, 35, 29, 785, DateTimeKind.Local).AddTicks(3339),
                            EdittedBy = "Asap",
                            EdittedDate = new DateTime(2023, 6, 6, 0, 35, 29, 787, DateTimeKind.Local).AddTicks(5666),
                            Percentage = 0,
                            Status = "pending"
                        },
                        new
                        {
                            Id = 2,
                            Completed = true,
                            Confirmed = false,
                            ConfirmedBy = "Instructor Malik",
                            CreatedBy = "Asap",
                            CreatedDate = new DateTime(2023, 6, 6, 0, 35, 29, 787, DateTimeKind.Local).AddTicks(6649),
                            EdittedBy = "Asap",
                            EdittedDate = new DateTime(2023, 6, 6, 0, 35, 29, 787, DateTimeKind.Local).AddTicks(6691),
                            Percentage = 100,
                            Status = "done"
                        },
                        new
                        {
                            Id = 3,
                            Completed = true,
                            Confirmed = true,
                            ConfirmedBy = "Instructor Malik",
                            CreatedBy = "Asap",
                            CreatedDate = new DateTime(2023, 6, 6, 0, 35, 29, 787, DateTimeKind.Local).AddTicks(6719),
                            EdittedBy = "Asap",
                            EdittedDate = new DateTime(2023, 6, 6, 0, 35, 29, 787, DateTimeKind.Local).AddTicks(6722),
                            Percentage = 100,
                            Status = "done"
                        },
                        new
                        {
                            Id = 4,
                            Completed = false,
                            Confirmed = false,
                            ConfirmedBy = "Instructor Malik",
                            CreatedBy = "Asap",
                            CreatedDate = new DateTime(2023, 6, 6, 0, 35, 29, 787, DateTimeKind.Local).AddTicks(6725),
                            EdittedBy = "Asap",
                            EdittedDate = new DateTime(2023, 6, 6, 0, 35, 29, 787, DateTimeKind.Local).AddTicks(6727),
                            Percentage = 0,
                            Status = "pending"
                        },
                        new
                        {
                            Id = 5,
                            Completed = false,
                            Confirmed = true,
                            ConfirmedBy = "Instructor Malik",
                            CreatedBy = "Asap",
                            CreatedDate = new DateTime(2023, 6, 6, 0, 35, 29, 787, DateTimeKind.Local).AddTicks(6730),
                            EdittedBy = "Asap",
                            EdittedDate = new DateTime(2023, 6, 6, 0, 35, 29, 787, DateTimeKind.Local).AddTicks(6733),
                            Percentage = 50,
                            Status = "progress"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("gym.Application.Extentions.IdentityExtension.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("gym.Application.Extentions.IdentityExtension.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gym.Application.Extentions.IdentityExtension.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("gym.Application.Extentions.IdentityExtension.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
